#!/usr/bin/env jruby

require 'rubygems'
require 'bundler/setup'

require 'pp'
require 'digest/sha1'
require 'fileutils'
require 'tempfile'
require 'timeout'
require 'sequel'        # db ORM
require 'json'
require 'securerandom'  # for uuid generation

require 'sinatra'       # web framework

DEFAULTS = {
   :tmp_dir => '/tmp/capaplan',
   :default_sha1_size_kb => '1000',
   :config_file => '/etc/capaplan/capaplan.conf',
   :db_uri => nil,
   :db_timeout => 0.1,
   :db_users_count => 10000,
   :db_items_count => 10000,
}

CONFIG_FILE = ARGV.shift || DEFAULTS[:config_file] 


SHA1_SIZE = { 
  '1'      => '60cacbf3d72e1e7834203da608037b1bf83b40e8',
  '10'     => '34e163be8e43c5631d8b92e9c43ab0bf0fa62b9c',
  '100'    => '5a6918eebd9d635e8f632e3ef34e3792b1b5ec13',
  '1000'   => '8fee1653e234fee8513245d3cb3e3c06d071493e',
  '10000'  => 'c2bfe67cfb2e4cac7edbb3013888abea6a123ac5',
}

SHA1_TIMEOUT = {
  '1'     => 0.001,
  '10'    => 0.01,
  '100'   => 0.01,
  '1000'  => 0.1,
  '10000' => 0.1,
}

def read_configuration() 
  debug "Reading configuration file #{CONFIG_FILE}"
  data = File.read(CONFIG_FILE)
  begin
    config = JSON.parse(data, :symbolize_names => true)
  rescue => e
    puts "Cannot parse config file #{CONFIG_FILE}. #{e.message}."
    exit 1
  end
  DEFAULTS.merge(config)
end

def initialize_data_files()
  # Precreate a bunch of filesystem data for consistent operations later.
  #  1kb, 10kb, 100kb, 1000kb, 10000kb
  5.times do |n|
    unless File.exists?("#{TMP_DIR}/#{10**n}kb_zeros")
      system("dd if=/dev/zero of=#{TMP_DIR}/#{10**n}kb_zeros bs=1k count=1 >/dev/null 2>&1")
    end
  end
end 

def initialize_database()
  unless DB.table_exists?(:testwrite)
    DB.create_table(:testwrite) do
      String :uuid, :primary_key=>true
    end
  end

  unless DB.table_exists?(:items) 
    DB.create_table(:items) do
      primary_key :id
      String :name
    end
    CONFIG[:db_items_count].times do |n|
      m = n + 1
      puts "#{m} items added to items table" if (m % 10000 == 0) or (m == CONFIG[:db_items_count])
      DB.run("insert into items (name) values ('item-#{m}')")
    end
  end

  unless DB.table_exists?(:users) 
    DB.create_table(:users) do
      primary_key :id
      String :name
    end
    CONFIG[:db_users_count].times do |n|
      m = n + 1
      puts "#{m} users added to users table" if (m % 10000 == 0) or (m == CONFIG[:db_users_count])
      DB.run("insert into users (name) values ('user-#{m}')")
    end
  end

  unless DB.table_exists?(:items_users) 
    DB.create_join_table(:user_id=>:users, :item_id=>:items)
  end

end

def verbose(message)
  puts message
end 

def debug(message)
  puts message
end 

#-------------------------------------

debug "Config file: #{CONFIG_FILE}"

if File.exists?(CONFIG_FILE) 
  CONFIG = read_configuration()
else 
  CONFIG = DEFAULTS
end

TMP_DIR = CONFIG[:tmp_dir]

#DB_CONNECT = "jdbc:mysql://localhost/capaplantest?user=root&password=root"
#DB_CONNECT = "jdbc:sqlite:#{TMP_DIR}/db.sqlite3"
DB_TIMEOUT = CONFIG[:db_timeout] || DEFAULTS[:db_timeout]

debug "db_uri: #{CONFIG[:db_uri]}"
debug "DB_TIMEOUT: #{DB_TIMEOUT}"

unless File.exists?(TMP_DIR) then
  FileUtils.mkdir(TMP_DIR)
end

unless CONFIG[:db_uri].nil?
  DB = Sequel.connect(CONFIG[:db_uri])
  initialize_database()
end

initialize_data_files()

KB_DATA_BLOCK = File.read("#{TMP_DIR}/1kb_zeros")

#---------

configure do
  mime_type :plain, 'text/plain'
  set :server, 'puma'
  set :port, 9595
end

get '/' do
  "Capaplan Capacity Planner\nUsage:\n  /status - give status\n"
end

get '/status' do
  "OK"
end

get '/load/cpu/sha1' do
  # compute the SHA1 of a 1mb of zeros
  # combined with buffer cache, this is essentially a CPU-only operation
  #  - though do we have stat() to content with?
  hex = ''
  size    = params[:size] || DEFAULTS[:default_sha1_size_kb]
  timeout = params[:timeout].to_f || SHA1_TIMEOUT[size].to_f

  begin 
    Timeout.timeout(timeout) {
      hex = Digest::SHA1.file("#{TMP_DIR}/#{size}kb_zeros").hexdigest
    }
  rescue => e
    puts "Timeout executing SHA1 (timeout=#{timeout}) error='#{e.message}'"
    halt 500
  end

  if ( hex != SHA1_SIZE[size] ) then
    puts "SHA1 checksum does not match! (#{hex})"
    halt 500
  end

  "OK"

end

post '/load/disk/write' do
  size = params[:size].to_i || 1024  # num kbytes to write
  data = ''
  file = Tempfile.new('write_test')
  puts "writing to #{file.path}"
  size.times { |n| 
    file.write(KB_DATA_BLOCK)
  }
  file.close(unlink_now=false)
  file.unlink unless params[:unlink]
  "OK: #{size}KiB written" 
end


post '/load/db/write' do

  unless CONFIG[:db_uri].nil?
    timeout = params[:timeout].to_f || DB_TIMEOUT.to_f

    begin 
      Timeout.timeout(timeout) {
        # code goes here
        uuid = SecureRandom.uuid
        DB.run("insert into testwrite values ('#{uuid}')")
      }
    rescue => e
      puts "Timeout executing /db/write (timeout=#{timeout}) error='#{e.message}'"
      halt 500
    end
    "OK"
  else
    "DISABLED"
  end

end

post '/control/shutdown' do
  exit!
end

post '/control/reloadconfig' do
  read_configuration
end

get '/load/noop/simple' do
  # basic minimal load result - pretty much return 200.
  # this is useful for comparing against raw application server performance
  # (to calculate ruby/sinatra overhead)
  "OK"
end

error do
  'Sorry there was a nasty error - ' + env['sinatra.error'].name
end

# vim: et ts=2 sw=2

